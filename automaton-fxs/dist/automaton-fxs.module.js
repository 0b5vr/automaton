/*!
 * @fms-cat/automaton-fxs v4.2.0
 * Bunch of automaton fxs
 *
 * Copyright (c) 2017-2020 FMS_Cat
 * @fms-cat/automaton-fxs is distributed under MIT License
 * https://github.com/FMS-Cat/automaton/blob/master/LICENSE
 */
const add = {
    name: 'Add',
    description: 'The simplest fx ever. Just add a constant value to the curve.',
    params: {
        value: { name: 'Value', type: 'float', default: 1.0 }
    },
    func(context) {
        return context.value + context.params.value;
    }
};

const cds = {
    name: 'Critically Damped Spring',
    description: 'Basically the best smoothing method. Shoutouts to Keijiro Takahashi',
    params: {
        factor: { name: 'Factor', type: 'float', default: 100.0, min: 0.0 },
        ratio: { name: 'Damp Ratio', type: 'float', default: 1.0 },
        preserve: { name: 'Preserve Velocity', type: 'boolean', default: false }
    },
    func(context) {
        const dt = context.deltaTime;
        const v = context.value;
        const k = context.params.factor;
        if (context.init) {
            context.state.pos = context.value;
            if (context.params.preserve) {
                const dv = v - context.getValue(context.time - dt);
                context.state.vel = dv / dt;
            }
            else {
                context.state.vel = 0.0;
            }
        }
        context.state.vel += (-k * (context.state.pos - v)
            - 2.0 * context.state.vel * Math.sqrt(k) * context.params.ratio) * dt;
        context.state.pos += context.state.vel * dt;
        return context.state.pos;
    }
};

function clamp(x, a, b) {
    return Math.min(Math.max(x, a), b);
}

function smin(a, b, k) {
    const h = Math.max(k - Math.abs(a - b), 0.0);
    return Math.min(a, b) - h * h * h / (6.0 * k * k);
}

const clamp$1 = {
    name: 'Clamp',
    description: 'Constrain the curve between two values, featuring smooth minimum.',
    params: {
        min: { name: 'Min', type: 'float', default: 0.0 },
        max: { name: 'Max', type: 'float', default: 1.0 },
        smooth: { name: 'Smooth', type: 'float', default: 0.0, min: 0.0 }
    },
    func(context) {
        if (context.params.smooth === 0.0) {
            return clamp(context.value, context.params.min, context.params.max);
        }
        const v = -smin(-context.params.min, -context.value, context.params.smooth);
        return smin(context.params.max, v, context.params.smooth);
    }
};

const exp = {
    name: 'Exponential Smoothing',
    description: 'Smooth the curve. Simple but good.',
    params: {
        factor: { name: 'Factor', type: 'float', default: 10.0, min: 0.0 }
    },
    func(context) {
        const v = context.value;
        if (context.init) {
            context.state.pos = v;
        }
        const k = Math.exp(-context.deltaTime * context.params.factor);
        context.state.pos = context.state.pos * k + v * (1.0 - k);
        return context.state.pos;
    }
};

const gravity = {
    name: 'Gravity',
    description: 'Accelerate and bounce the curve.',
    params: {
        a: { name: 'Acceleration', type: 'float', default: 9.8 },
        e: { name: 'Restitution', type: 'float', default: 0.5, min: 0.0 },
        preserve: { name: 'Preserve Velocity', type: 'boolean', default: false }
    },
    func(context) {
        const dt = context.deltaTime;
        const v = context.value;
        if (context.init) {
            context.state.pos = v;
            if (context.params.preserve) {
                const dv = v - context.getValue(context.time - dt);
                context.state.vel = dv / dt;
            }
            else {
                context.state.vel = 0.0;
            }
        }
        const a = Math.sign(v - context.state.pos) * context.params.a;
        context.state.vel += a * dt;
        context.state.pos += context.state.vel * dt;
        if (Math.sign(a) !== Math.sign(v - context.state.pos)) {
            context.state.vel *= -context.params.e;
            context.state.pos = v + context.params.e * (v - context.state.pos);
        }
        return context.state.pos;
    }
};

const hermitePatch = {
    name: 'Hermite Patch',
    description: 'Patch a curve using hermite spline.',
    params: {},
    func(context) {
        if (context.init) {
            const dt = context.deltaTime;
            const v0 = context.getValue(context.t0);
            const dv0 = v0 - context.getValue(context.t0 - dt);
            const v1 = context.getValue(context.t1);
            const dv1 = v1 - context.getValue(context.t1 - dt);
            context.state.p0 = v0;
            context.state.m0 = dv0 / dt * context.length;
            context.state.p1 = v1;
            context.state.m1 = dv1 / dt * context.length;
        }
        const { p0, m0, p1, m1 } = context.state;
        const t = context.progress;
        return (((2.0 * t - 3.0) * t * t + 1.0) * p0 +
            (((t - 2.0) * t + 1.0) * t) * m0 +
            ((-2.0 * t + 3.0) * t * t) * p1 +
            ((t - 1.0) * t * t) * m1);
    }
};

const lofi = {
    name: 'Lo-Fi',
    description: 'Make curve more crunchy.',
    params: {
        rate: { name: 'Frame Rate', type: 'float', default: 10.0, min: 0.0, max: 1000.0 },
        relative: { name: 'Relative', type: 'boolean', default: false },
        reso: { name: 'Reso Per Unit', type: 'float', default: 10.0, min: 0.0, max: 1000.0 },
        round: { name: 'Round', type: 'boolean', default: false }
    },
    func(context) {
        let t;
        if (context.params.rate === 0.0) {
            t = context.time;
        }
        else if (context.params.relative) {
            t = context.t0 + Math.floor((context.time - context.t0) * context.params.rate) / context.params.rate;
        }
        else {
            t = Math.floor((context.time) * context.params.rate) / context.params.rate;
        }
        let v = context.getValue(t);
        if (context.params.reso !== 0.0) {
            v = Math.floor(v * context.params.reso + (context.params.round ? 0.5 : 0.0)) / context.params.reso;
        }
        return v;
    }
};

function smoothstep(a, b, k) {
    const smooth = k * k * (3.0 - 2.0 * k);
    return a + (b - a) * smooth;
}

class Xorshift {
    constructor(seed) {
        this.__seed = 1;
        this.set(seed);
    }
    gen(seed) {
        if (seed) {
            this.set(seed);
        }
        this.__seed = this.__seed ^ (this.__seed << 13);
        this.__seed = this.__seed ^ (this.__seed >>> 17);
        this.__seed = this.__seed ^ (this.__seed << 5);
        return this.__seed / Math.pow(2, 32) + 0.5;
    }
    set(seed = 1) {
        this.__seed = seed;
    }
}

const xorshift = new Xorshift();
const noise = {
    name: 'Fractal Noise',
    description: 'wiggle()',
    params: {
        recursion: { name: 'Recursion', type: 'int', default: 4, min: 1, max: 99 },
        freq: { name: 'Frequency', type: 'float', default: 1.0, min: 0.0 },
        reso: { name: 'Resolution', type: 'float', default: 8.0, min: 1.0 },
        seed: { name: 'Seed', type: 'int', default: 1, min: 0 },
        amp: { name: 'Amp', type: 'float', default: 0.2 }
    },
    func(context) {
        if (context.init) {
            xorshift.gen(context.params.seed);
            context.state.table = new Float32Array(Math.floor(context.params.reso) + 2);
            for (let i = 1; i < context.params.reso; i++) {
                context.state.table[i] = xorshift.gen() * 2.0 - 1.0;
            }
        }
        let v = context.value;
        const p = context.progress;
        for (let i = 0; i < context.params.recursion; i++) {
            const index = (p * context.params.freq * context.params.reso * Math.pow(2.0, i)) % context.params.reso;
            const indexi = Math.floor(index);
            const indexf = index - indexi;
            const factor = Math.pow(0.5, i + 1.0);
            v += context.params.amp * factor * smoothstep(context.state.table[indexi], context.state.table[indexi + 1], indexf);
        }
        return v;
    }
};

const pow = {
    name: 'Power',
    description: 'You got boost power!',
    params: {
        pow: { name: 'Power', type: 'float', default: 2.0 },
        bias: { name: 'Bias', type: 'float', default: 0.0 },
        positive: { name: 'Force Positive', type: 'boolean', default: false }
    },
    func(context) {
        const v = context.value - context.params.bias;
        const sign = context.params.positive ? 1.0 : Math.sign(v);
        return Math.pow(Math.abs(v), context.params.pow) * sign + context.params.bias;
    }
};

const repeat = {
    name: 'Repeat',
    description: 'Repeat a section of the curve.',
    params: {
        interval: { name: 'Interval', type: 'float', default: 1.0, min: 0.0 },
    },
    func(context) {
        if (context.index === context.i1) {
            context.setShouldNotInterpolate(true);
        }
        if ((context.elapsed + context.deltaTime) % context.params.interval < context.deltaTime) {
            context.setShouldNotInterpolate(true);
        }
        return context.getValue(context.t0 + context.elapsed % context.params.interval);
    }
};

const TAU = Math.PI * 2.0;
const sine = {
    name: 'Sinewave',
    description: 'Overlay a sinewave to the curve.',
    params: {
        amp: { name: 'Amp', type: 'float', default: 0.1 },
        freq: { name: 'Frequency', type: 'float', default: 5.0 },
        offset: { name: 'Offset', type: 'float', default: 0.0, min: 0.0, max: 1.0 }
    },
    func(context) {
        const v = context.value;
        const p = context.elapsed * context.params.freq + context.params.offset;
        return v + context.params.amp * Math.sin(p * TAU);
    }
};

export { add, cds, clamp$1 as clamp, exp, gravity, hermitePatch, lofi, noise, pow, repeat, sine };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
